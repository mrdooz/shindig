#ifndef _PARSER_HPP_
#define _PARSER_HPP_

#include <vector>

enum TokenTag
{
  INVALID = -1,
	// general
  ID = 1,
	ASSIGN,
	SEMI_COLON,
	L_BRACKET,
	R_BRACKET,

	// states
	RASTERIZER_STATE,
	DEPTH_STENCIL_STATE,
	BLEND_STATE,
	SAMPLER_STATE,
	RENDER_TARGET_VIEW,
	DEPTH_STENCIL_VIEW,

	// rasterizer
	RAST_FILL_MODE,
	RAST_CULL_MODE,
	RAST_FRONT_COUNTER_CLOCKWISE,
	RAST_DEPTH_BIAS,
	RAST_DEPTH_BIAS_CLAMP,
	RAST_SLOPE_SCALED_DEPTH_BIAS,
	RAST_DEPTH_CLIP_ENABLE,
	RAST_SCISSOR_ENABLE,
	RAST_MULTISAMPLE_ENABLE,
	RAST_ANTIALIASED_LINE_ENABLE,

	// depth
  DEPTH_ENABLE,
	DEPTH_WRITE_MASK,
	DEPTH_FUNC,
	DEPTH_STENCIL_ENABLE,
	DEPTH_STENCIL_READ_MASK,
	DEPTH_STENCIL_WRITE_MASK,
	DEPTH_FRONT_FACE_STENCIL_FAIL,
	DEPTH_FRONT_FACE_STENCIL_DEPTH_FAIL,
	DEPTH_FRONT_FACE_STENCIL_PASS,
	DEPTH_FRONT_FACE_STENCIL_FUNC,
	DEPTH_BACK_FACE_STENCIL_FAIL,
	DEPTH_BACK_FACE_STENCIL_DEPTH_FAIL,
	DEPTH_BACK_FACE_STENCIL_PASS,
	DEPTH_BACK_FACE_STENCIL_FUNC,

	// blend
	BLEND_ENABLE,
	BLEND_ALPHA_TO_COVERAGE_ENABLE,
	BLEND_SRC_BLEND,
	BLEND_DST_BLEND,
	BLEND_BLEND_OP,
	BLEND_SRC_ALPHA_BLEND,
	BLEND_DST_ALPHA_BLEND,
	BLEND_OP_ALPHA,
	BLEND_RENDERTARGET_WRITE_MASK,

	// sampler
	SAMPLER_FILTER,
	SAMPLER_ADDRESS_U,
	SAMPLER_ADDRESS_V,
	SAMPLER_ADDRESS_W,
	SAMPLER_MIP_LOD_BIAS,
	SAMPLER_MAX_ANISOTROPY,
	SAMPLER_CMP_FUNC,
	SAMPLER_BORDER_COLOR,
	SAMPLER_MIN_LOD,
	SAMPLER_MAX_LOD,
	SAMPLER_TEXTURE,


	// values
	BOOL_TRUE,
	BOOL_FALSE,
	DEPTH_WRITE_MASK_ALL,
	DEPTH_WRITE_MASK_ZERO,
	FILL_WIREFRAME,
	FILL_SOLID,
	FILTER_MIN_MAG_MIP_POINT,
	FILTER_MIN_MAG_POINT_MIP_LINEAR,
	FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
	FILTER_MIN_POINT_MAG_MIP_LINEAR,
	FILTER_MIN_LINEAR_MAG_MIP_POINT,
	FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	FILTER_MIN_MAG_LINEAR_MIP_POINT,
	FILTER_MIN_MAG_MIP_LINEAR,
	FILTER_ANISOTROPIC,
	FILTER_COMPARISON_MIN_MAG_MIP_POINT,
	FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
	FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
	FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
	FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
	FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
	FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
	FILTER_COMPARISON_ANISOTROPIC,
	FILTER_TEXT_1BIT,

	BLEND_ZERO,
	BLEND_ONE,
	BLEND_SRC_COLOR,
	BLEND_INV_SRC_COLOR,
	BLEND_SRC_ALPHA,
	BLEND_INV_SRC_ALPHA,
	BLEND_DEST_ALPHA,
	BLEND_INV_DEST_ALPHA,
	BLEND_DEST_COLOR,
	BLEND_INV_DEST_COLOR,
	BLEND_SRC_ALPHA_SAT,
	BLEND_BLEND_FACTOR,
	BLEND_INV_BLEND_FACTOR,
	BLEND_SRC1_COLOR,
	BLEND_INV_SRC1_COLOR,
	BLEND_SRC1_ALPHA,
	BLEND_INV_SRC1_ALPHA,

	TADDRESS_CLAMP,
	TADDRESS_WRAP,
	TADDRESS_MIRROR,
	TADDRESS_BORDER,
	TADDRESS_MIRROR_ONCE,

	CULL_NONE,
	CULL_FRONT,
	CULL_BACK,

	CMP_NEVER,
	CMP_LESS,
	CMP_EQUAL,
	CMP_LESS_EQUAL,
	CMP_GREATER,
	CMP_NOT_EQUAL,
	CMP_GREATER_EQUAL,
	CMP_ALWAYS,

	STENCILOP_KEEP,
	STENCILOP_ZERO,
	STENCILOP_REPLACE,
	STENCILOP_INCR_SAT,
	STENCILOP_DECR_SAT,
	STENCILOP_INVERT,
	STENCILOP_INCR,
	STENCILOP_DECR,

	BLENDOP_ADD,
	BLENDOP_SUBTRACT,
	BLENDOP_REV_SUBTRACT,
	BLENDOP_MIN,
	BLENDOP_MAX,

};

struct Token
{
  Token(const TokenTag tag, const int extra = 0) : tag(tag), extra(extra) {}
  TokenTag tag;
  int extra;
};

typedef std::vector<Token> Tokens;
char* make_string(const char* ts, const char* te);


#endif