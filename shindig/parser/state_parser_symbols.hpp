
#ifndef _PARSER_TOKENS_HPP_
#define _PARSER_TOKENS_HPP_
#include <stack>
#include <vector>

enum TokenTag
{
    INVALID = -1,
    FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
RASTERIZER_DEPTH_BIAS,
BLEND_SRC_BLEND,
BLEND_BLEND_ENABLE,
PASS_AB_SAMPLE_MASK,
FILTER_MIN_LINEAR_MAG_MIP_POINT,
FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
DEPTHSTENCIL_DEPTH_ENABLE,
FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
FILL_WIREFRAME,
RASTERIZER_DEPTH_BIAS_CLAMP,
FILTER_MIN_MAG_MIP_LINEAR,
DEPTHSTENCIL_BACK_FACE_STENCIL_FAIL,
DEPTHSTENCIL_FRONT_FACE_STENCIL_FUNC,
DEPTH_WRITE_MASK_V,
RASTERIZER_FILL_MODE,
RENDER_TARGET_VIEW,
DEPTHSTENCIL_DEPTH_WRITE_MASK,
SAMPLER_ADDRESS_W,
L_BRACE,
ASSIGN,
PIXEL_SHADER,
PASS_DS_STENCIL_REF,
SAMPLER_BORDER_COLOR,
FILTER_MIN_MAG_POINT_MIP_LINEAR,
DEPTHSTENCIL_FRONT_FACE_STENCIL_PASS,
SRC_BLEND_K,
INDEX,
DEPTHSTENCIL_BACK_FACE_STENCIL_FUNC,
TADDRESS_MIRROR_ONCE,
BLEND_RENDER_TARGET_WRITE_MASK,
SAMPLER_MIN_LOD,
BLEND_STATE_K,
SRC_BLEND_ALPHA_K,
ALPHA_TO_COVERAGE_ENABLE_K,
ADDRESS_V,
DEST_BLEND_ALPHA_K,
RASTERIZER_MULTISAMPLE_ENABLE,
BLEND_DEST_BLEND_ALPHA,
COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
DEPTHSTENCIL_FRONT_FACE_STENCIL_FAIL,
BLEND_DEST_BLEND,
RASTERIZER_FRONT_COUNTER_CLOCKWISE,
RENDER_TARGET_WRITE_MASK_K,
FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
FILTER_COMPARISON_ANISOTROPIC,
RASTERIZER_STATE_K,
DEPTHSTENCIL_BACK_FACE_STENCIL_DEPTH_FAIL,
FILTER,
BLEND_ALPHA_TO_COVERAGE_ENABLE,
BLEND_OP_ALPHA_K,
VERTEX_SHADER,
SAMPLER_ADDRESS_U,
DEPTHSTENCIL_BACK_FACE_STENCIL_PASS,
BLEND_SRC_BLEND_ALPHA,
SAMPLER_ADDRESS_V,
PASS_GENERATE_MIPS,
FILTER_MIN_POINT_MAG_MIP_LINEAR,
DEPTH_STENCIL_STATE_K,
SAMPLER_MAX_ANISOTROPY,
FILTER_TEXT_1BIT,
SAMPLER_STATE_K,
SEMI_COLON,
TADDRESS_MIRROR,
FILL_SOLID,
DEPTHSTENCIL_STENCIL_WRITE_MASK,
DEPTHSTENCIL_FRONT_FACE_STENCIL_DEPTH_FAIL,
FILTER_COMPARISON_MIN_MAG_MIP_POINT,
FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
DEPTH_STENCIL_VIEW,
FILTER_MIN_MAG_LINEAR_MIP_POINT,
FILTER_ANISOTROPIC,
FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
TADDRESS_WRAP,
DEPTHSTENCIL_DEPTH_ENABLE_K,
DEST_BLEND_K,
RASTERIZER_DEPTH_CLIP_ENABLE,
TADDRESS_CLAMP,
RASTERIZER_ANTIALIASED_LINE_ENABLE,
SAMPLER_MIP_LODBIAS,
BLEND_V,
BLEND_BLEND_OP,
SAMPLER_MAX_LOD,
RASTERIZER_SLOPE_SCALED_DEPTH_BIAS,
BLEND_OP_K,
BLEND_OP_V,
BLEND_ENABLE_K,
FILTER_MIN_MAG_MIP_POINT,
BLEND_BLEND_OP_ALPHA,
SAMPLER_COMPARISON_FUNC,
FILTER_V,
PASS_AB_BLEND_FACTOR,
RASTERIZER_CULL_MODE,
RASTERIZER_SCISSOR_ENABLE,
BOOL_V,
TADDRESS_BORDER,
GEOMETRY_SHADER,
SAMPLER_FILTER,
DEPTHSTENCIL_STENCIL_READ_MASK,
DEPTHSTENCIL_DEPTH_FUNC,
FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
VALUE,
ID,
DEPTHSTENCIL_STENCIL_ENABLE,
R_BRACE,
FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR
};

struct Token
{
  Token(const TokenTag tag, const int extra = 0) : tag(tag), extra(extra) {}
  TokenTag tag;
union {
  int extra;
const char* _str;
};
};
typedef std::vector<Token> Tokens;

#include <map>
#include <string>
typedef std::map< std::string, D3D11_BLEND_DESC> BlendDescs;
typedef std::map< std::string, D3D11_RASTERIZER_DESC> RasterizerDescs;
typedef std::map< std::string, D3D11_SAMPLER_DESC> SamplerDescs;

struct BigState
{
  BlendDescs _blend_descs;
  RasterizerDescs _rasterizer_descs;
  SamplerDescs _sampler_descs;
};
#endif
