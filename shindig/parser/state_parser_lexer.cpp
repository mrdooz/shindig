
#line 1 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <windows.h>
#include <memory.h>
#include <d3d11.h>
#include "state_parser_symbols.hpp"

// HLSL RasterizerState parser


#line 2 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
static const char _rasta_man_actions[] = {
	0, 1, 2, 1, 3, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 2, 
	0, 1, 2, 3, 4, 2, 3, 5, 
	2, 3, 6, 2, 3, 7, 2, 3, 
	8, 2, 3, 9, 2, 3, 10, 2, 
	3, 11, 2, 3, 12, 2, 3, 13, 
	2, 3, 14, 2, 3, 15, 2, 3, 
	16, 2, 3, 17, 2, 3, 18, 2, 
	3, 19, 2, 3, 20, 2, 3, 21, 
	2, 3, 22, 2, 3, 23, 2, 3, 
	24, 2, 3, 25, 2, 3, 26, 2, 
	3, 27, 2, 3, 28, 2, 3, 29, 
	2, 3, 30, 2, 3, 31, 2, 3, 
	32, 2, 3, 33, 2, 3, 34, 2, 
	3, 35, 2, 3, 36, 2, 3, 37, 
	2, 3, 38, 2, 3, 39, 2, 3, 
	40, 2, 3, 41, 2, 3, 42, 2, 
	3, 43, 2, 3, 44, 2, 3, 45, 
	2, 3, 46, 2, 3, 47, 2, 3, 
	48, 2, 3, 49, 2, 3, 50, 2, 
	3, 51, 2, 3, 52, 2, 3, 53, 
	2, 3, 54, 2, 3, 55, 2, 3, 
	56, 2, 3, 57, 2, 3, 58, 2, 
	3, 59
};

static const short _rasta_man_key_offsets[] = {
	0, 0, 5, 7, 9, 11, 13, 15, 
	17, 22, 26, 30, 77, 80, 84, 89, 
	91, 94, 96, 109, 116, 125, 136, 145, 
	154, 163, 172, 181, 190, 199, 208, 217, 
	226, 235, 244, 253, 262, 271, 280, 289, 
	298, 307, 316, 325, 334, 343, 352, 361, 
	370, 379, 388, 397, 406, 419, 428, 437, 
	446, 455, 464, 479, 488, 497, 506, 515, 
	524, 533, 542, 551, 560, 569, 578, 587, 
	596, 605, 614, 623, 632, 641, 650, 659, 
	668, 683, 692, 701, 710, 719, 730, 739, 
	748, 757, 766, 775, 784, 793, 802, 811, 
	820, 829, 840, 849, 858, 869, 878, 887, 
	896, 905, 914, 923, 932, 941, 950, 959, 
	968, 977, 986, 995, 1004, 1015, 1024, 1037, 
	1046, 1055, 1064, 1073, 1082, 1091, 1100, 1109, 
	1118, 1127, 1136, 1145, 1154, 1163, 1172, 1181, 
	1190, 1199, 1212, 1225, 1234, 1243, 1252, 1261, 
	1270, 1279, 1288, 1297, 1306, 1315, 1324, 1333, 
	1342, 1351, 1360, 1369, 1378, 1387, 1396, 1405, 
	1414, 1423, 1432, 1441, 1450, 1459, 1468, 1477, 
	1486, 1495, 1504, 1513, 1522, 1535, 1544, 1553, 
	1562, 1571, 1580, 1589, 1598, 1607, 1616, 1625, 
	1634, 1643, 1652, 1661, 1672, 1681, 1690, 1699, 
	1708, 1717, 1726, 1735, 1744, 1755, 1764, 1773, 
	1785, 1796, 1805, 1814, 1823, 1832, 1841, 1850, 
	1859, 1868, 1879, 1888, 1897, 1906, 1915, 1924, 
	1933, 1942, 1951, 1962, 1975, 1986, 1995, 2006, 
	2019, 2028, 2037, 2046, 2055, 2064, 2073, 2082, 
	2091, 2102, 2111, 2120, 2129, 2138, 2147, 2156, 
	2165, 2174, 2183, 2192, 2201, 2210, 2219, 2228, 
	2237, 2246, 2255, 2264, 2273, 2282, 2291, 2300, 
	2309, 2320, 2329, 2338, 2347, 2360, 2369, 2378, 
	2387, 2396, 2405, 2414, 2423, 2432, 2441, 2450, 
	2459, 2468, 2477, 2486, 2495, 2504, 2513, 2522, 
	2531, 2540, 2549, 2558, 2567, 2576, 2585, 2594, 
	2603, 2612, 2621, 2630, 2639, 2648, 2657, 2666, 
	2675, 2684, 2693, 2702, 2715, 2724, 2733, 2742, 
	2751, 2760, 2769, 2778, 2789, 2798, 2807, 2816, 
	2825, 2834, 2843, 2852, 2861, 2870, 2879, 2888, 
	2897, 2906, 2915, 2924, 2933, 2942, 2951, 2960, 
	2969, 2978, 2987, 2996, 3005, 3016, 3025, 3038, 
	3047, 3056, 3065, 3074, 3083, 3092, 3101, 3110, 
	3119, 3128, 3137, 3146, 3155, 3166, 3175, 3184, 
	3193, 3202, 3211, 3220, 3229, 3238, 3247, 3256, 
	3265, 3274, 3283, 3292, 3303, 3312, 3321, 3330, 
	3339, 3348, 3357, 3366, 3375, 3384, 3393, 3402, 
	3411, 3420, 3429, 3438, 3447, 3456, 3465, 3474, 
	3483, 3492, 3501, 3510, 3519, 3528, 3537, 3546, 
	3555, 3564, 3573, 3588, 3597, 3606, 3615, 3624, 
	3633, 3642, 3651, 3660, 3669, 3678, 3687, 3696, 
	3705, 3714, 3723, 3737, 3748, 3757, 3766, 3775, 
	3784, 3793, 3802, 3811, 3820, 3831, 3840, 3849, 
	3858, 3867, 3876, 3885, 3894, 3903, 3912, 3921, 
	3930, 3939, 3948, 3957, 3966, 3975, 3984, 3993, 
	4002, 4011, 4020, 4029, 4042, 4051, 4060, 4069, 
	4078, 4087, 4096, 4105, 4114, 4123, 4134, 4143, 
	4152, 4161, 4170, 4179, 4188, 4197, 4206, 4215, 
	4225, 4236, 4247, 4264, 4281, 4296, 4309, 4322, 
	4337, 4356
};

static const char _rasta_man_trans_keys[] = {
	32, 90, 122, 9, 13, 69, 101, 82, 
	114, 79, 111, 48, 57, 48, 57, 65, 
	122, 32, 9, 13, 48, 57, 32, 93, 
	9, 13, 32, 61, 9, 13, 32, 48, 
	59, 61, 65, 66, 67, 68, 70, 73, 
	77, 78, 79, 82, 83, 84, 87, 91, 
	95, 97, 98, 99, 100, 101, 102, 104, 
	105, 109, 110, 111, 114, 115, 116, 119, 
	123, 124, 125, 9, 13, 49, 57, 69, 
	106, 107, 112, 113, 122, 32, 9, 13, 
	32, 61, 9, 13, 46, 88, 120, 48, 
	57, 48, 57, 46, 48, 57, 48, 57, 
	68, 76, 78, 95, 100, 108, 110, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 76, 80, 95, 
	108, 112, 48, 57, 65, 90, 97, 122, 
	72, 95, 104, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 86, 95, 
	118, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 71, 95, 103, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 65, 76, 
	79, 95, 97, 108, 111, 48, 57, 66, 
	90, 98, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 75, 95, 107, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 68, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	69, 70, 79, 83, 95, 101, 102, 111, 
	115, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 66, 95, 98, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 72, 95, 104, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 69, 70, 79, 83, 
	95, 101, 102, 111, 115, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 76, 
	85, 95, 108, 117, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 77, 95, 109, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 77, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 77, 95, 109, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 80, 83, 95, 
	112, 115, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 72, 95, 104, 48, 57, 65, 90, 
	97, 122, 66, 83, 95, 98, 115, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 66, 83, 95, 98, 
	115, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	65, 66, 67, 95, 97, 98, 99, 48, 
	57, 68, 90, 100, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 80, 95, 
	112, 48, 57, 65, 90, 97, 122, 72, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	72, 95, 104, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 65, 
	66, 67, 95, 97, 98, 99, 48, 57, 
	68, 90, 100, 122, 65, 73, 82, 95, 
	97, 105, 114, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 77, 95, 
	109, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	85, 95, 117, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	67, 95, 99, 48, 57, 65, 90, 97, 
	122, 75, 95, 107, 48, 57, 65, 90, 
	97, 122, 87, 95, 119, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 67, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 86, 95, 118, 48, 57, 65, 90, 
	97, 122, 66, 68, 83, 95, 98, 100, 
	115, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 70, 95, 102, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 65, 67, 95, 
	97, 99, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 72, 95, 104, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	65, 67, 95, 97, 99, 48, 57, 66, 
	90, 98, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 49, 65, 67, 
	95, 97, 99, 48, 57, 66, 90, 98, 
	122, 65, 67, 95, 97, 99, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 72, 95, 
	104, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 65, 67, 95, 97, 
	99, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 72, 95, 104, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 65, 
	67, 95, 97, 99, 48, 57, 66, 90, 
	98, 122, 66, 68, 83, 95, 98, 100, 
	115, 48, 57, 65, 90, 97, 122, 65, 
	73, 95, 97, 105, 48, 57, 66, 90, 
	98, 122, 88, 95, 120, 48, 57, 65, 
	90, 97, 122, 78, 82, 95, 110, 114, 
	48, 57, 65, 90, 97, 122, 76, 77, 
	80, 95, 108, 109, 112, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	77, 95, 109, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 71, 95, 103, 48, 57, 65, 
	90, 97, 122, 77, 80, 95, 109, 112, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 77, 95, 109, 48, 
	57, 65, 90, 97, 122, 77, 80, 95, 
	109, 112, 48, 57, 65, 90, 97, 122, 
	77, 95, 109, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 71, 95, 103, 48, 57, 65, 
	90, 97, 122, 76, 77, 80, 95, 108, 
	109, 112, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 77, 95, 109, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 77, 95, 
	109, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 80, 95, 
	112, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 77, 95, 109, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 77, 95, 109, 
	48, 57, 65, 90, 97, 122, 76, 77, 
	80, 95, 108, 109, 112, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 77, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 71, 95, 103, 48, 57, 65, 90, 
	97, 122, 76, 77, 95, 108, 109, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 77, 95, 109, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 76, 77, 95, 
	108, 109, 48, 57, 65, 90, 97, 122, 
	77, 95, 109, 48, 57, 65, 90, 97, 
	122, 76, 77, 80, 95, 108, 109, 112, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 65, 69, 95, 97, 101, 
	48, 57, 66, 90, 98, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 90, 95, 122, 48, 57, 
	65, 89, 97, 121, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 78, 86, 95, 110, 
	118, 48, 57, 65, 90, 97, 122, 68, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 71, 95, 103, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	87, 95, 119, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 77, 95, 109, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	75, 95, 107, 48, 57, 65, 90, 97, 
	122, 77, 95, 109, 48, 57, 65, 90, 
	97, 122, 87, 95, 119, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 85, 95, 117, 
	48, 57, 65, 90, 97, 122, 66, 95, 
	98, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 65, 79, 82, 
	85, 95, 97, 111, 114, 117, 48, 57, 
	66, 90, 98, 122, 77, 95, 109, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 49, 65, 66, 67, 95, 
	97, 98, 99, 48, 57, 68, 90, 100, 
	122, 65, 67, 95, 97, 99, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 72, 95, 
	104, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 65, 67, 95, 97, 
	99, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 72, 95, 104, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 72, 95, 
	104, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 65, 66, 67, 
	95, 97, 98, 99, 48, 57, 68, 90, 
	100, 122, 66, 95, 98, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 73, 82, 95, 105, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 77, 95, 109, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 80, 95, 
	112, 48, 57, 65, 90, 97, 122, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 93, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 61, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	61, 68, 76, 78, 95, 100, 108, 110, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 61, 65, 76, 79, 95, 97, 108, 
	111, 9, 13, 48, 57, 66, 90, 98, 
	122, 32, 61, 76, 85, 95, 108, 117, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 61, 69, 95, 101, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 61, 79, 
	95, 111, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 61, 65, 69, 95, 97, 
	101, 9, 13, 48, 57, 66, 90, 98, 
	122, 32, 61, 65, 79, 82, 85, 95, 
	97, 111, 114, 117, 9, 13, 48, 57, 
	66, 90, 98, 122, 32, 61, 82, 95, 
	114, 9, 13, 48, 57, 65, 90, 97, 
	122, 0
};

static const char _rasta_man_single_lengths[] = {
	0, 3, 2, 2, 2, 0, 0, 0, 
	1, 2, 2, 37, 1, 2, 3, 0, 
	1, 0, 7, 1, 3, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 7, 3, 3, 3, 
	3, 3, 9, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	9, 3, 3, 3, 3, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 7, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 7, 7, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 7, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 3, 6, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 3, 3, 3, 3, 
	3, 3, 5, 7, 5, 3, 5, 7, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 7, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 7, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 7, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 9, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 8, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 7, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	3, 3, 9, 9, 7, 5, 5, 7, 
	11, 5
};

static const char _rasta_man_range_lengths[] = {
	0, 1, 0, 0, 0, 1, 1, 1, 
	2, 1, 1, 5, 1, 1, 1, 1, 
	1, 1, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4
};

static const short _rasta_man_index_offsets[] = {
	0, 0, 5, 8, 11, 14, 16, 18, 
	20, 24, 28, 32, 75, 78, 82, 87, 
	89, 92, 94, 105, 110, 117, 126, 133, 
	140, 147, 154, 161, 168, 175, 182, 189, 
	196, 203, 210, 217, 224, 231, 238, 245, 
	252, 259, 266, 273, 280, 287, 294, 301, 
	308, 315, 322, 329, 336, 347, 354, 361, 
	368, 375, 382, 395, 402, 409, 416, 423, 
	430, 437, 444, 451, 458, 465, 472, 479, 
	486, 493, 500, 507, 514, 521, 528, 535, 
	542, 555, 562, 569, 576, 583, 592, 599, 
	606, 613, 620, 627, 634, 641, 648, 655, 
	662, 669, 678, 685, 692, 701, 708, 715, 
	722, 729, 736, 743, 750, 757, 764, 771, 
	778, 785, 792, 799, 806, 815, 822, 833, 
	840, 847, 854, 861, 868, 875, 882, 889, 
	896, 903, 910, 917, 924, 931, 938, 945, 
	952, 959, 970, 981, 988, 995, 1002, 1009, 
	1016, 1023, 1030, 1037, 1044, 1051, 1058, 1065, 
	1072, 1079, 1086, 1093, 1100, 1107, 1114, 1121, 
	1128, 1135, 1142, 1149, 1156, 1163, 1170, 1177, 
	1184, 1191, 1198, 1205, 1212, 1223, 1230, 1237, 
	1244, 1251, 1258, 1265, 1272, 1279, 1286, 1293, 
	1300, 1307, 1314, 1321, 1330, 1337, 1344, 1351, 
	1358, 1365, 1372, 1379, 1386, 1395, 1402, 1409, 
	1419, 1428, 1435, 1442, 1449, 1456, 1463, 1470, 
	1477, 1484, 1493, 1500, 1507, 1514, 1521, 1528, 
	1535, 1542, 1549, 1558, 1569, 1578, 1585, 1594, 
	1605, 1612, 1619, 1626, 1633, 1640, 1647, 1654, 
	1661, 1670, 1677, 1684, 1691, 1698, 1705, 1712, 
	1719, 1726, 1733, 1740, 1747, 1754, 1761, 1768, 
	1775, 1782, 1789, 1796, 1803, 1810, 1817, 1824, 
	1831, 1840, 1847, 1854, 1861, 1872, 1879, 1886, 
	1893, 1900, 1907, 1914, 1921, 1928, 1935, 1942, 
	1949, 1956, 1963, 1970, 1977, 1984, 1991, 1998, 
	2005, 2012, 2019, 2026, 2033, 2040, 2047, 2054, 
	2061, 2068, 2075, 2082, 2089, 2096, 2103, 2110, 
	2117, 2124, 2131, 2138, 2149, 2156, 2163, 2170, 
	2177, 2184, 2191, 2198, 2207, 2214, 2221, 2228, 
	2235, 2242, 2249, 2256, 2263, 2270, 2277, 2284, 
	2291, 2298, 2305, 2312, 2319, 2326, 2333, 2340, 
	2347, 2354, 2361, 2368, 2375, 2384, 2391, 2402, 
	2409, 2416, 2423, 2430, 2437, 2444, 2451, 2458, 
	2465, 2472, 2479, 2486, 2493, 2502, 2509, 2516, 
	2523, 2530, 2537, 2544, 2551, 2558, 2565, 2572, 
	2579, 2586, 2593, 2600, 2609, 2616, 2623, 2630, 
	2637, 2644, 2651, 2658, 2665, 2672, 2679, 2686, 
	2693, 2700, 2707, 2714, 2721, 2728, 2735, 2742, 
	2749, 2756, 2763, 2770, 2777, 2784, 2791, 2798, 
	2805, 2812, 2819, 2832, 2839, 2846, 2853, 2860, 
	2867, 2874, 2881, 2888, 2895, 2902, 2909, 2916, 
	2923, 2930, 2937, 2949, 2958, 2965, 2972, 2979, 
	2986, 2993, 3000, 3007, 3014, 3023, 3030, 3037, 
	3044, 3051, 3058, 3065, 3072, 3079, 3086, 3093, 
	3100, 3107, 3114, 3121, 3128, 3135, 3142, 3149, 
	3156, 3163, 3170, 3177, 3188, 3195, 3202, 3209, 
	3216, 3223, 3230, 3237, 3244, 3251, 3260, 3267, 
	3274, 3281, 3288, 3295, 3302, 3309, 3316, 3323, 
	3330, 3338, 3346, 3360, 3374, 3386, 3396, 3406, 
	3418, 3434
};

static const short _rasta_man_indicies[] = {
	1, 2, 2, 1, 0, 3, 3, 0, 
	4, 4, 0, 5, 5, 0, 7, 6, 
	8, 6, 9, 0, 11, 11, 12, 10, 
	12, 13, 12, 10, 14, 1, 14, 0, 
	17, 18, 20, 21, 22, 23, 24, 25, 
	27, 28, 29, 30, 31, 32, 33, 34, 
	35, 36, 37, 38, 39, 40, 41, 37, 
	27, 37, 28, 29, 42, 31, 43, 44, 
	45, 35, 46, 14, 47, 15, 19, 26, 
	37, 26, 16, 15, 15, 48, 17, 1, 
	17, 48, 50, 51, 51, 19, 49, 7, 
	52, 50, 19, 49, 8, 53, 55, 56, 
	57, 26, 55, 56, 57, 26, 26, 26, 
	54, 26, 26, 26, 26, 0, 58, 26, 
	58, 26, 26, 26, 54, 59, 60, 26, 
	59, 60, 26, 26, 26, 54, 61, 26, 
	61, 26, 26, 26, 54, 62, 26, 62, 
	26, 26, 26, 54, 63, 64, 63, 26, 
	26, 26, 54, 65, 26, 65, 26, 26, 
	26, 54, 66, 67, 66, 26, 26, 26, 
	54, 68, 26, 68, 26, 26, 26, 54, 
	69, 26, 69, 26, 26, 26, 54, 70, 
	26, 70, 26, 26, 26, 54, 71, 26, 
	71, 26, 26, 26, 54, 72, 26, 72, 
	26, 26, 26, 54, 73, 26, 73, 26, 
	26, 26, 54, 74, 26, 74, 26, 26, 
	26, 54, 75, 76, 75, 26, 26, 26, 
	54, 77, 26, 77, 26, 26, 26, 54, 
	78, 26, 78, 26, 26, 26, 54, 79, 
	26, 79, 26, 26, 26, 54, 80, 26, 
	80, 26, 26, 26, 54, 81, 26, 81, 
	26, 26, 26, 54, 75, 26, 75, 26, 
	26, 26, 54, 66, 26, 66, 26, 26, 
	26, 54, 63, 26, 63, 26, 26, 26, 
	54, 82, 26, 82, 26, 26, 26, 54, 
	83, 26, 83, 26, 26, 26, 54, 84, 
	26, 84, 26, 26, 26, 54, 85, 26, 
	85, 26, 26, 26, 54, 86, 26, 86, 
	26, 26, 26, 54, 87, 26, 87, 26, 
	26, 26, 54, 88, 26, 88, 26, 26, 
	26, 54, 89, 26, 89, 26, 26, 26, 
	54, 90, 26, 90, 26, 26, 26, 54, 
	91, 92, 93, 26, 91, 92, 93, 26, 
	26, 26, 54, 94, 26, 94, 26, 26, 
	26, 54, 95, 26, 95, 26, 26, 26, 
	54, 96, 26, 96, 26, 26, 26, 54, 
	97, 26, 97, 26, 26, 26, 54, 98, 
	26, 98, 26, 26, 26, 54, 99, 100, 
	101, 102, 103, 99, 100, 101, 102, 26, 
	26, 26, 54, 104, 26, 104, 26, 26, 
	26, 54, 105, 26, 105, 26, 26, 26, 
	54, 106, 26, 106, 26, 26, 26, 54, 
	107, 26, 107, 26, 26, 26, 54, 108, 
	26, 108, 26, 26, 26, 54, 109, 26, 
	109, 26, 26, 26, 54, 110, 26, 110, 
	26, 26, 26, 54, 111, 26, 111, 26, 
	26, 26, 54, 112, 26, 112, 26, 26, 
	26, 54, 113, 26, 113, 26, 26, 26, 
	54, 114, 26, 114, 26, 26, 26, 54, 
	116, 117, 116, 26, 26, 26, 115, 118, 
	26, 118, 26, 26, 26, 54, 119, 26, 
	119, 26, 26, 26, 54, 120, 26, 120, 
	26, 26, 26, 54, 121, 26, 121, 26, 
	26, 26, 54, 116, 26, 116, 26, 26, 
	26, 54, 122, 26, 122, 26, 26, 26, 
	54, 123, 26, 123, 26, 26, 26, 54, 
	124, 26, 124, 26, 26, 26, 54, 125, 
	26, 125, 26, 26, 26, 54, 99, 100, 
	101, 102, 26, 99, 100, 101, 102, 26, 
	26, 26, 54, 126, 26, 126, 26, 26, 
	26, 54, 127, 26, 127, 26, 26, 26, 
	54, 128, 26, 128, 26, 26, 26, 54, 
	129, 26, 129, 26, 26, 26, 54, 130, 
	131, 26, 130, 131, 26, 26, 26, 54, 
	132, 26, 132, 26, 26, 26, 54, 133, 
	26, 133, 26, 26, 26, 54, 134, 26, 
	134, 26, 26, 26, 54, 135, 26, 135, 
	26, 26, 26, 54, 136, 26, 136, 26, 
	26, 26, 54, 137, 138, 137, 26, 26, 
	26, 54, 139, 26, 139, 26, 26, 26, 
	54, 140, 26, 140, 26, 26, 26, 54, 
	141, 26, 141, 26, 26, 26, 54, 137, 
	26, 137, 26, 26, 26, 54, 142, 26, 
	142, 26, 26, 26, 54, 143, 144, 26, 
	143, 144, 26, 26, 26, 54, 145, 26, 
	145, 26, 26, 26, 54, 146, 26, 146, 
	26, 26, 26, 54, 147, 148, 149, 147, 
	148, 26, 26, 26, 54, 150, 26, 150, 
	26, 26, 26, 54, 151, 26, 151, 26, 
	26, 26, 54, 152, 26, 152, 26, 26, 
	26, 54, 153, 26, 153, 26, 26, 26, 
	54, 154, 26, 154, 26, 26, 26, 54, 
	155, 26, 155, 26, 26, 26, 54, 156, 
	26, 156, 26, 26, 26, 54, 157, 26, 
	157, 26, 26, 26, 54, 158, 26, 158, 
	26, 26, 26, 54, 159, 160, 159, 26, 
	26, 26, 54, 161, 26, 161, 26, 26, 
	26, 54, 162, 26, 162, 26, 26, 26, 
	54, 163, 26, 163, 26, 26, 26, 54, 
	164, 26, 164, 26, 26, 26, 54, 159, 
	26, 159, 26, 26, 26, 54, 147, 148, 
	26, 147, 148, 26, 26, 26, 54, 165, 
	26, 165, 26, 26, 26, 54, 166, 167, 
	168, 169, 166, 167, 168, 26, 26, 26, 
	54, 170, 26, 170, 26, 26, 26, 54, 
	171, 26, 171, 26, 26, 26, 54, 172, 
	26, 172, 26, 26, 26, 54, 173, 26, 
	173, 26, 26, 26, 54, 174, 26, 174, 
	26, 26, 26, 54, 175, 26, 175, 26, 
	26, 26, 54, 176, 26, 176, 26, 26, 
	26, 54, 177, 26, 177, 26, 26, 26, 
	54, 179, 180, 179, 26, 26, 26, 178, 
	181, 26, 181, 26, 26, 26, 54, 182, 
	26, 182, 26, 26, 26, 54, 183, 26, 
	183, 26, 26, 26, 54, 184, 26, 184, 
	26, 26, 26, 54, 179, 26, 179, 26, 
	26, 26, 54, 185, 26, 185, 26, 26, 
	26, 54, 186, 26, 186, 26, 26, 26, 
	54, 187, 26, 187, 26, 26, 26, 54, 
	188, 26, 188, 26, 26, 26, 54, 166, 
	167, 168, 26, 166, 167, 168, 26, 26, 
	26, 54, 189, 190, 191, 26, 189, 190, 
	191, 26, 26, 26, 54, 192, 26, 192, 
	26, 26, 26, 54, 193, 26, 193, 26, 
	26, 26, 54, 194, 26, 194, 26, 26, 
	26, 54, 195, 26, 195, 26, 26, 26, 
	54, 196, 26, 196, 26, 26, 26, 54, 
	197, 198, 197, 26, 26, 26, 54, 199, 
	26, 199, 26, 26, 26, 54, 200, 26, 
	200, 26, 26, 26, 54, 201, 26, 201, 
	26, 26, 26, 54, 197, 26, 197, 26, 
	26, 26, 54, 202, 26, 202, 26, 26, 
	26, 54, 203, 26, 203, 26, 26, 26, 
	54, 204, 26, 204, 26, 26, 26, 54, 
	206, 207, 206, 26, 26, 26, 205, 208, 
	26, 208, 26, 26, 26, 54, 209, 26, 
	209, 26, 26, 26, 54, 210, 26, 210, 
	26, 26, 26, 54, 211, 26, 211, 26, 
	26, 26, 54, 212, 26, 212, 26, 26, 
	26, 54, 213, 26, 213, 26, 26, 26, 
	54, 214, 215, 214, 26, 26, 26, 54, 
	216, 26, 216, 26, 26, 26, 54, 217, 
	26, 217, 26, 26, 26, 54, 218, 26, 
	218, 26, 26, 26, 54, 219, 26, 219, 
	26, 26, 26, 54, 220, 26, 220, 26, 
	26, 26, 54, 221, 26, 221, 26, 26, 
	26, 54, 222, 26, 222, 26, 26, 26, 
	54, 223, 26, 223, 26, 26, 26, 54, 
	214, 26, 214, 26, 26, 26, 54, 206, 
	26, 206, 26, 26, 26, 54, 224, 26, 
	224, 26, 26, 26, 54, 225, 26, 225, 
	26, 26, 26, 54, 226, 227, 228, 229, 
	226, 227, 228, 26, 26, 26, 54, 230, 
	26, 230, 26, 26, 26, 54, 231, 26, 
	231, 26, 26, 26, 54, 232, 26, 232, 
	26, 26, 26, 54, 233, 26, 233, 26, 
	26, 26, 54, 234, 235, 234, 26, 26, 
	26, 54, 236, 26, 236, 26, 26, 26, 
	54, 237, 26, 237, 26, 26, 26, 54, 
	238, 26, 238, 26, 26, 26, 54, 239, 
	26, 239, 26, 26, 26, 54, 240, 26, 
	240, 26, 26, 26, 54, 234, 26, 234, 
	26, 26, 26, 54, 241, 26, 241, 26, 
	26, 26, 54, 242, 26, 242, 26, 26, 
	26, 54, 243, 26, 243, 26, 26, 26, 
	54, 244, 245, 246, 244, 245, 26, 26, 
	26, 54, 247, 26, 247, 26, 26, 26, 
	54, 248, 26, 248, 26, 26, 26, 54, 
	249, 26, 249, 26, 26, 26, 54, 250, 
	26, 250, 26, 26, 26, 54, 251, 26, 
	251, 26, 26, 26, 54, 252, 26, 252, 
	26, 26, 26, 54, 253, 26, 253, 26, 
	26, 26, 54, 254, 26, 254, 26, 26, 
	26, 54, 244, 245, 26, 244, 245, 26, 
	26, 26, 54, 255, 26, 255, 26, 26, 
	26, 54, 256, 26, 256, 26, 26, 26, 
	54, 257, 258, 259, 260, 258, 259, 26, 
	26, 26, 54, 261, 262, 263, 261, 262, 
	26, 26, 26, 54, 264, 26, 264, 26, 
	26, 26, 54, 265, 26, 265, 26, 26, 
	26, 54, 266, 26, 266, 26, 26, 26, 
	54, 267, 26, 267, 26, 26, 26, 54, 
	268, 26, 268, 26, 26, 26, 54, 269, 
	26, 269, 26, 26, 26, 54, 270, 26, 
	270, 26, 26, 26, 54, 271, 26, 271, 
	26, 26, 26, 54, 261, 262, 26, 261, 
	262, 26, 26, 26, 54, 272, 26, 272, 
	26, 26, 26, 54, 273, 26, 273, 26, 
	26, 26, 54, 274, 26, 274, 26, 26, 
	26, 54, 275, 26, 275, 26, 26, 26, 
	54, 276, 26, 276, 26, 26, 26, 54, 
	277, 26, 277, 26, 26, 26, 54, 278, 
	26, 278, 26, 26, 26, 54, 279, 26, 
	279, 26, 26, 26, 54, 258, 259, 26, 
	258, 259, 26, 26, 26, 54, 226, 227, 
	228, 26, 226, 227, 228, 26, 26, 26, 
	54, 280, 281, 26, 280, 281, 26, 26, 
	26, 54, 282, 26, 282, 26, 26, 26, 
	54, 283, 284, 26, 283, 284, 26, 26, 
	26, 54, 286, 287, 288, 289, 286, 287, 
	288, 26, 26, 26, 285, 290, 26, 290, 
	26, 26, 26, 54, 291, 26, 291, 26, 
	26, 26, 54, 292, 26, 292, 26, 26, 
	26, 54, 293, 26, 293, 26, 26, 26, 
	54, 294, 26, 294, 26, 26, 26, 54, 
	295, 296, 295, 26, 26, 26, 54, 297, 
	26, 297, 26, 26, 26, 54, 298, 26, 
	298, 26, 26, 26, 54, 299, 300, 301, 
	299, 300, 26, 26, 26, 54, 302, 26, 
	302, 26, 26, 26, 54, 303, 26, 303, 
	26, 26, 26, 54, 304, 305, 304, 26, 
	26, 26, 54, 306, 26, 306, 26, 26, 
	26, 54, 307, 26, 307, 26, 26, 26, 
	54, 308, 26, 308, 26, 26, 26, 54, 
	309, 26, 309, 26, 26, 26, 54, 304, 
	26, 304, 26, 26, 26, 54, 310, 26, 
	310, 26, 26, 26, 54, 311, 26, 311, 
	26, 26, 26, 54, 312, 26, 312, 26, 
	26, 26, 54, 313, 26, 313, 26, 26, 
	26, 54, 314, 315, 314, 26, 26, 26, 
	54, 316, 26, 316, 26, 26, 26, 54, 
	317, 26, 317, 26, 26, 26, 54, 318, 
	319, 318, 26, 26, 26, 54, 320, 26, 
	320, 26, 26, 26, 54, 321, 26, 321, 
	26, 26, 26, 54, 322, 26, 322, 26, 
	26, 26, 54, 323, 26, 323, 26, 26, 
	26, 54, 324, 26, 324, 26, 26, 26, 
	54, 318, 26, 318, 26, 26, 26, 54, 
	314, 26, 314, 26, 26, 26, 54, 299, 
	300, 26, 299, 300, 26, 26, 26, 54, 
	295, 26, 295, 26, 26, 26, 54, 325, 
	26, 325, 26, 26, 26, 54, 326, 26, 
	326, 26, 26, 26, 54, 327, 328, 329, 
	330, 327, 328, 329, 26, 26, 26, 54, 
	331, 26, 331, 26, 26, 26, 54, 332, 
	26, 332, 26, 26, 26, 54, 333, 26, 
	333, 26, 26, 26, 54, 334, 26, 334, 
	26, 26, 26, 54, 335, 26, 335, 26, 
	26, 26, 54, 336, 337, 336, 26, 26, 
	26, 54, 338, 26, 338, 26, 26, 26, 
	54, 339, 26, 339, 26, 26, 26, 54, 
	340, 341, 340, 26, 26, 26, 54, 342, 
	26, 342, 26, 26, 26, 54, 343, 26, 
	343, 26, 26, 26, 54, 344, 26, 344, 
	26, 26, 26, 54, 345, 26, 345, 26, 
	26, 26, 54, 340, 26, 340, 26, 26, 
	26, 54, 336, 26, 336, 26, 26, 26, 
	54, 346, 26, 346, 26, 26, 26, 54, 
	347, 26, 347, 26, 26, 26, 54, 348, 
	349, 348, 26, 26, 26, 54, 350, 26, 
	350, 26, 26, 26, 54, 351, 26, 351, 
	26, 26, 26, 54, 352, 26, 352, 26, 
	26, 26, 54, 353, 26, 353, 26, 26, 
	26, 54, 348, 26, 348, 26, 26, 26, 
	54, 354, 26, 354, 26, 26, 26, 54, 
	355, 26, 355, 26, 26, 26, 54, 356, 
	26, 356, 26, 26, 26, 54, 357, 26, 
	357, 26, 26, 26, 54, 358, 359, 358, 
	26, 26, 26, 54, 360, 26, 360, 26, 
	26, 26, 54, 361, 26, 361, 26, 26, 
	26, 54, 362, 363, 362, 26, 26, 26, 
	54, 364, 26, 364, 26, 26, 26, 54, 
	365, 26, 365, 26, 26, 26, 54, 366, 
	26, 366, 26, 26, 26, 54, 367, 26, 
	367, 26, 26, 26, 54, 368, 26, 368, 
	26, 26, 26, 54, 362, 26, 362, 26, 
	26, 26, 54, 358, 26, 358, 26, 26, 
	26, 54, 327, 328, 329, 26, 327, 328, 
	329, 26, 26, 26, 54, 369, 26, 369, 
	26, 26, 26, 54, 370, 26, 370, 26, 
	26, 26, 54, 371, 26, 371, 26, 26, 
	26, 54, 372, 26, 372, 26, 26, 26, 
	54, 373, 374, 373, 26, 26, 26, 54, 
	375, 26, 375, 26, 26, 26, 54, 376, 
	26, 376, 26, 26, 26, 54, 377, 378, 
	379, 377, 378, 26, 26, 26, 54, 380, 
	26, 380, 26, 26, 26, 54, 381, 26, 
	381, 26, 26, 26, 54, 382, 26, 382, 
	26, 26, 26, 54, 383, 26, 383, 26, 
	26, 26, 54, 384, 26, 384, 26, 26, 
	26, 54, 385, 386, 385, 26, 26, 26, 
	54, 387, 26, 387, 26, 26, 26, 54, 
	388, 26, 388, 26, 26, 26, 54, 389, 
	390, 389, 26, 26, 26, 54, 391, 26, 
	391, 26, 26, 26, 54, 392, 26, 392, 
	26, 26, 26, 54, 393, 26, 393, 26, 
	26, 26, 54, 394, 26, 394, 26, 26, 
	26, 54, 389, 26, 389, 26, 26, 26, 
	54, 385, 26, 385, 26, 26, 26, 54, 
	395, 26, 395, 26, 26, 26, 54, 396, 
	26, 396, 26, 26, 26, 54, 397, 398, 
	397, 26, 26, 26, 54, 399, 26, 399, 
	26, 26, 26, 54, 400, 26, 400, 26, 
	26, 26, 54, 401, 26, 401, 26, 26, 
	26, 54, 402, 26, 402, 26, 26, 26, 
	54, 403, 26, 403, 26, 26, 26, 54, 
	397, 26, 397, 26, 26, 26, 54, 377, 
	378, 26, 377, 378, 26, 26, 26, 54, 
	373, 26, 373, 26, 26, 26, 54, 286, 
	287, 288, 26, 286, 287, 288, 26, 26, 
	26, 54, 404, 26, 404, 26, 26, 26, 
	54, 405, 26, 405, 26, 26, 26, 54, 
	406, 26, 406, 26, 26, 26, 54, 408, 
	409, 408, 26, 26, 26, 407, 410, 26, 
	410, 26, 26, 26, 54, 411, 26, 411, 
	26, 26, 26, 54, 412, 26, 412, 26, 
	26, 26, 54, 408, 26, 408, 26, 26, 
	26, 54, 413, 26, 413, 26, 26, 26, 
	54, 414, 26, 414, 26, 26, 26, 54, 
	415, 26, 415, 26, 26, 26, 54, 416, 
	26, 416, 26, 26, 26, 54, 417, 26, 
	417, 26, 26, 26, 54, 418, 419, 26, 
	418, 419, 26, 26, 26, 54, 420, 26, 
	420, 26, 26, 26, 54, 421, 26, 421, 
	26, 26, 26, 54, 422, 26, 422, 26, 
	26, 26, 54, 423, 26, 423, 26, 26, 
	26, 54, 424, 26, 424, 26, 26, 26, 
	54, 425, 26, 425, 26, 26, 26, 54, 
	426, 26, 426, 26, 26, 26, 54, 427, 
	26, 427, 26, 26, 26, 54, 428, 429, 
	428, 26, 26, 26, 54, 430, 26, 430, 
	26, 26, 26, 54, 431, 26, 431, 26, 
	26, 26, 54, 432, 26, 432, 26, 26, 
	26, 54, 433, 26, 433, 26, 26, 26, 
	54, 428, 26, 428, 26, 26, 26, 54, 
	434, 435, 26, 434, 435, 26, 26, 26, 
	54, 436, 26, 436, 26, 26, 26, 54, 
	437, 26, 437, 26, 26, 26, 54, 438, 
	26, 438, 26, 26, 26, 54, 439, 440, 
	439, 26, 26, 26, 54, 441, 26, 441, 
	26, 26, 26, 54, 442, 26, 442, 26, 
	26, 26, 54, 443, 26, 443, 26, 26, 
	26, 54, 444, 26, 444, 26, 26, 26, 
	54, 445, 26, 445, 26, 26, 26, 54, 
	446, 447, 446, 26, 26, 26, 54, 448, 
	26, 448, 26, 26, 26, 54, 449, 26, 
	449, 26, 26, 26, 54, 450, 26, 450, 
	26, 26, 26, 54, 451, 26, 451, 26, 
	26, 26, 54, 452, 453, 452, 26, 26, 
	26, 54, 454, 26, 454, 26, 26, 26, 
	54, 455, 26, 455, 26, 26, 26, 54, 
	456, 26, 456, 26, 26, 26, 54, 452, 
	26, 452, 26, 26, 26, 54, 446, 26, 
	446, 26, 26, 26, 54, 439, 26, 439, 
	26, 26, 26, 54, 457, 458, 457, 26, 
	26, 26, 54, 459, 26, 459, 26, 26, 
	26, 54, 460, 26, 460, 26, 26, 26, 
	54, 461, 26, 461, 26, 26, 26, 54, 
	462, 26, 462, 26, 26, 26, 54, 463, 
	26, 463, 26, 26, 26, 54, 464, 26, 
	464, 26, 26, 26, 54, 465, 26, 465, 
	26, 26, 26, 54, 457, 26, 457, 26, 
	26, 26, 54, 466, 467, 468, 469, 26, 
	466, 467, 468, 469, 26, 26, 26, 54, 
	470, 26, 470, 26, 26, 26, 54, 471, 
	26, 471, 26, 26, 26, 54, 472, 26, 
	472, 26, 26, 26, 54, 473, 26, 473, 
	26, 26, 26, 54, 474, 26, 474, 26, 
	26, 26, 54, 475, 476, 475, 26, 26, 
	26, 54, 477, 26, 477, 26, 26, 26, 
	54, 478, 26, 478, 26, 26, 26, 54, 
	479, 26, 479, 26, 26, 26, 54, 480, 
	26, 480, 26, 26, 26, 54, 475, 26, 
	475, 26, 26, 26, 54, 481, 26, 481, 
	26, 26, 26, 54, 482, 26, 482, 26, 
	26, 26, 54, 483, 26, 483, 26, 26, 
	26, 54, 484, 26, 484, 26, 26, 26, 
	54, 485, 486, 487, 488, 489, 486, 487, 
	488, 26, 26, 26, 54, 490, 491, 492, 
	490, 491, 26, 26, 26, 54, 493, 26, 
	493, 26, 26, 26, 54, 494, 26, 494, 
	26, 26, 26, 54, 495, 26, 495, 26, 
	26, 26, 54, 496, 26, 496, 26, 26, 
	26, 54, 497, 26, 497, 26, 26, 26, 
	54, 498, 26, 498, 26, 26, 26, 54, 
	499, 26, 499, 26, 26, 26, 54, 500, 
	26, 500, 26, 26, 26, 54, 490, 491, 
	26, 490, 491, 26, 26, 26, 54, 501, 
	26, 501, 26, 26, 26, 54, 502, 26, 
	502, 26, 26, 26, 54, 503, 26, 503, 
	26, 26, 26, 54, 504, 26, 504, 26, 
	26, 26, 54, 506, 507, 506, 26, 26, 
	26, 505, 508, 26, 508, 26, 26, 26, 
	54, 509, 26, 509, 26, 26, 26, 54, 
	506, 26, 506, 26, 26, 26, 54, 510, 
	26, 510, 26, 26, 26, 54, 511, 26, 
	511, 26, 26, 26, 54, 512, 26, 512, 
	26, 26, 26, 54, 513, 26, 513, 26, 
	26, 26, 54, 515, 516, 515, 26, 26, 
	26, 514, 517, 26, 517, 26, 26, 26, 
	54, 518, 26, 518, 26, 26, 26, 54, 
	519, 26, 519, 26, 26, 26, 54, 520, 
	26, 520, 26, 26, 26, 54, 515, 26, 
	515, 26, 26, 26, 54, 521, 26, 521, 
	26, 26, 26, 54, 522, 26, 522, 26, 
	26, 26, 54, 523, 26, 523, 26, 26, 
	26, 54, 524, 26, 524, 26, 26, 26, 
	54, 486, 487, 488, 26, 486, 487, 488, 
	26, 26, 26, 54, 525, 26, 525, 26, 
	26, 26, 54, 526, 26, 526, 26, 26, 
	26, 54, 527, 26, 527, 26, 26, 26, 
	54, 528, 26, 528, 26, 26, 26, 54, 
	529, 26, 529, 26, 26, 26, 54, 530, 
	26, 530, 26, 26, 26, 54, 531, 26, 
	531, 26, 26, 26, 54, 532, 26, 532, 
	26, 26, 26, 54, 533, 26, 533, 26, 
	26, 26, 54, 534, 535, 26, 534, 535, 
	26, 26, 26, 54, 536, 26, 536, 26, 
	26, 26, 54, 537, 26, 537, 26, 26, 
	26, 54, 538, 26, 538, 26, 26, 26, 
	54, 539, 26, 539, 26, 26, 26, 54, 
	540, 26, 540, 26, 26, 26, 54, 541, 
	26, 541, 26, 26, 26, 54, 542, 26, 
	542, 26, 26, 26, 54, 543, 26, 543, 
	26, 26, 26, 54, 544, 26, 544, 26, 
	26, 26, 54, 11, 26, 11, 545, 26, 
	26, 54, 12, 13, 26, 12, 26, 26, 
	26, 54, 14, 1, 26, 14, 26, 26, 
	26, 54, 14, 1, 55, 56, 57, 26, 
	55, 56, 57, 14, 26, 26, 26, 54, 
	14, 1, 91, 92, 93, 26, 91, 92, 
	93, 14, 26, 26, 26, 54, 14, 1, 
	130, 131, 26, 130, 131, 14, 26, 26, 
	26, 54, 14, 1, 142, 26, 142, 14, 
	26, 26, 26, 54, 14, 1, 413, 26, 
	413, 14, 26, 26, 26, 54, 14, 1, 
	418, 419, 26, 418, 419, 14, 26, 26, 
	26, 54, 14, 1, 466, 467, 468, 469, 
	26, 466, 467, 468, 469, 14, 26, 26, 
	26, 54, 14, 1, 531, 26, 531, 14, 
	26, 26, 26, 54, 0
};

static const short _rasta_man_trans_targs[] = {
	11, 1, 2, 3, 4, 11, 11, 15, 
	7, 17, 11, 8, 9, 11, 10, 12, 
	0, 13, 14, 16, 11, 11, 18, 52, 
	85, 96, 19, 138, 170, 220, 343, 346, 
	348, 394, 450, 453, 463, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 11, 11, 
	11, 11, 5, 6, 11, 11, 11, 20, 
	21, 43, 19, 19, 22, 23, 24, 25, 
	42, 26, 27, 41, 28, 29, 30, 31, 
	32, 33, 34, 35, 40, 36, 37, 38, 
	39, 19, 44, 45, 46, 47, 48, 49, 
	50, 51, 19, 53, 55, 81, 54, 19, 
	56, 57, 58, 59, 64, 69, 76, 80, 
	60, 61, 62, 63, 19, 65, 66, 67, 
	68, 19, 70, 11, 71, 75, 72, 73, 
	74, 19, 77, 78, 79, 19, 82, 83, 
	84, 19, 86, 89, 87, 88, 19, 90, 
	91, 92, 95, 93, 94, 19, 97, 98, 
	117, 99, 100, 101, 104, 116, 102, 103, 
	19, 105, 106, 107, 108, 109, 110, 111, 
	115, 112, 113, 114, 19, 118, 119, 123, 
	133, 137, 120, 121, 122, 19, 124, 125, 
	126, 127, 11, 128, 132, 129, 130, 131, 
	19, 134, 135, 136, 19, 139, 142, 149, 
	140, 141, 19, 143, 144, 145, 148, 146, 
	147, 19, 150, 151, 152, 11, 153, 169, 
	154, 155, 156, 157, 158, 159, 160, 168, 
	161, 162, 163, 164, 165, 166, 167, 19, 
	171, 172, 173, 184, 197, 219, 174, 175, 
	176, 177, 178, 183, 179, 180, 181, 182, 
	19, 185, 186, 187, 188, 192, 196, 189, 
	190, 191, 19, 193, 194, 195, 19, 198, 
	199, 200, 210, 214, 218, 201, 205, 209, 
	202, 203, 204, 19, 206, 207, 208, 19, 
	211, 212, 213, 19, 215, 216, 217, 19, 
	221, 222, 19, 223, 335, 11, 224, 258, 
	300, 334, 225, 226, 227, 228, 229, 230, 
	257, 231, 232, 233, 241, 256, 234, 235, 
	236, 240, 237, 238, 239, 19, 242, 243, 
	244, 245, 246, 255, 247, 248, 249, 254, 
	250, 251, 252, 253, 19, 259, 260, 261, 
	276, 284, 299, 262, 263, 264, 265, 266, 
	267, 275, 268, 269, 270, 274, 271, 272, 
	273, 19, 277, 278, 279, 283, 280, 281, 
	282, 19, 285, 286, 287, 288, 289, 298, 
	290, 291, 292, 297, 293, 294, 295, 296, 
	19, 301, 302, 303, 304, 305, 333, 306, 
	307, 308, 323, 332, 309, 310, 311, 312, 
	313, 314, 322, 315, 316, 317, 321, 318, 
	319, 320, 19, 324, 325, 326, 331, 327, 
	328, 329, 330, 19, 336, 337, 338, 11, 
	339, 342, 340, 341, 19, 344, 345, 19, 
	347, 19, 349, 363, 350, 351, 352, 353, 
	354, 355, 356, 357, 358, 362, 359, 360, 
	361, 19, 364, 385, 365, 366, 367, 368, 
	384, 369, 370, 371, 372, 373, 374, 383, 
	375, 376, 377, 378, 379, 382, 380, 381, 
	19, 386, 393, 387, 388, 389, 390, 391, 
	392, 19, 395, 406, 409, 444, 396, 397, 
	398, 399, 400, 401, 405, 402, 403, 404, 
	19, 407, 408, 19, 410, 411, 421, 429, 
	439, 443, 412, 416, 420, 413, 414, 415, 
	19, 417, 418, 419, 19, 422, 423, 424, 
	425, 11, 426, 428, 427, 19, 430, 431, 
	432, 433, 11, 434, 438, 435, 436, 437, 
	19, 440, 441, 442, 19, 445, 446, 447, 
	448, 449, 19, 451, 452, 19, 454, 461, 
	455, 456, 457, 458, 459, 460, 19, 462, 
	19, 464
};

static const unsigned char _rasta_man_trans_actions[] = {
	45, 0, 0, 0, 0, 15, 41, 0, 
	0, 209, 43, 0, 0, 5, 0, 0, 
	0, 215, 206, 3, 11, 13, 0, 0, 
	0, 0, 212, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 7, 9, 
	39, 31, 0, 0, 33, 35, 37, 0, 
	0, 0, 170, 68, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 107, 0, 0, 0, 0, 0, 0, 
	0, 0, 92, 0, 0, 0, 0, 197, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 110, 0, 0, 0, 
	0, 152, 0, 23, 0, 0, 0, 0, 
	0, 119, 0, 0, 0, 56, 0, 0, 
	0, 101, 0, 0, 0, 0, 95, 0, 
	0, 0, 0, 0, 0, 191, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	203, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 50, 0, 0, 0, 
	0, 0, 0, 0, 0, 137, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	116, 0, 0, 0, 143, 0, 0, 0, 
	0, 0, 62, 0, 0, 0, 0, 0, 
	0, 182, 0, 0, 0, 29, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 200, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	155, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 140, 0, 0, 0, 146, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 167, 0, 0, 0, 161, 
	0, 0, 0, 134, 0, 0, 0, 131, 
	0, 0, 179, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 86, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 89, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	74, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0, 0, 0, 0, 0, 
	0, 0, 0, 80, 0, 0, 0, 17, 
	0, 0, 0, 0, 104, 0, 0, 194, 
	0, 125, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 53, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	122, 0, 0, 0, 0, 0, 0, 0, 
	0, 176, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	59, 0, 0, 185, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	164, 0, 0, 0, 158, 0, 0, 0, 
	0, 25, 0, 0, 0, 149, 0, 0, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	113, 0, 0, 0, 128, 0, 0, 0, 
	0, 0, 173, 0, 0, 65, 0, 0, 
	0, 0, 0, 0, 0, 0, 188, 0, 
	98, 3
};

static const unsigned char _rasta_man_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const unsigned char _rasta_man_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _rasta_man_eof_trans[] = {
	0, 1, 1, 1, 1, 7, 7, 1, 
	11, 11, 1, 0, 49, 49, 50, 53, 
	50, 54, 55, 1, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 116, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 179, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	206, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 286, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 408, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 506, 55, 55, 55, 55, 55, 55, 
	55, 515, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55
};

static const int rasta_man_start = 11;
static const int rasta_man_first_final = 11;
static const int rasta_man_error = 0;

static const int rasta_man_en_main = 11;


#line 15 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"


extern char* make_string(const char* ts, const char* te);
extern int make_hex(const char* ts, const char* te);

int parse_tokens(Tokens& tokens, char* str)
{
  char *p = str, *pe = str + strlen(str);
  int cs, act = 0;
  char *ts, *te, *tm = 0, *eof = 0;  

  
#line 1608 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
	{
	cs = rasta_man_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 1614 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _rasta_man_actions + _rasta_man_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 2:
#line 1 "NONE"
	{ts = p;}
	break;
#line 1633 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
		}
	}

	_keys = _rasta_man_trans_keys + _rasta_man_key_offsets[cs];
	_trans = _rasta_man_index_offsets[cs];

	_klen = _rasta_man_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _rasta_man_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _rasta_man_indicies[_trans];
_eof_trans:
	cs = _rasta_man_trans_targs[_trans];

	if ( _rasta_man_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _rasta_man_actions + _rasta_man_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 3:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 4:
#line 166 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 6;}
	break;
	case 5:
#line 167 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 7;}
	break;
	case 6:
#line 168 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 8;}
	break;
	case 7:
#line 169 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 9;}
	break;
	case 8:
#line 171 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 10;}
	break;
	case 9:
#line 172 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 11;}
	break;
	case 10:
#line 174 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 12;}
	break;
	case 11:
#line 176 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 13;}
	break;
	case 12:
#line 177 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 14;}
	break;
	case 13:
#line 178 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 15;}
	break;
	case 14:
#line 179 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 16;}
	break;
	case 15:
#line 180 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 17;}
	break;
	case 16:
#line 181 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 18;}
	break;
	case 17:
#line 182 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 19;}
	break;
	case 18:
#line 183 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 20;}
	break;
	case 19:
#line 185 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 21;}
	break;
	case 20:
#line 186 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 22;}
	break;
	case 21:
#line 188 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 24;}
	break;
	case 22:
#line 189 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 25;}
	break;
	case 23:
#line 191 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 26;}
	break;
	case 24:
#line 192 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 27;}
	break;
	case 25:
#line 197 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 31;}
	break;
	case 26:
#line 198 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 32;}
	break;
	case 27:
#line 199 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 33;}
	break;
	case 28:
#line 200 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 34;}
	break;
	case 29:
#line 203 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 36;}
	break;
	case 30:
#line 204 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 37;}
	break;
	case 31:
#line 205 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 38;}
	break;
	case 32:
#line 207 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 40;}
	break;
	case 33:
#line 208 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 41;}
	break;
	case 34:
#line 209 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 42;}
	break;
	case 35:
#line 210 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 43;}
	break;
	case 36:
#line 211 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 44;}
	break;
	case 37:
#line 212 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 45;}
	break;
	case 38:
#line 213 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 46;}
	break;
	case 39:
#line 214 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 47;}
	break;
	case 40:
#line 215 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 48;}
	break;
	case 41:
#line 216 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 49;}
	break;
	case 42:
#line 217 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 50;}
	break;
	case 43:
#line 218 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 51;}
	break;
	case 44:
#line 220 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 52;}
	break;
	case 45:
#line 221 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 53;}
	break;
	case 46:
#line 222 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 54;}
	break;
	case 47:
#line 224 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 56;}
	break;
	case 48:
#line 226 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 57;}
	break;
	case 49:
#line 227 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 58;}
	break;
	case 50:
#line 228 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 59;}
	break;
	case 51:
#line 230 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 60;}
	break;
	case 52:
#line 231 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 61;}
	break;
	case 53:
#line 233 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 63;}
	break;
	case 54:
#line 235 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 64;}
	break;
	case 55:
#line 236 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 65;}
	break;
	case 56:
#line 238 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 66;}
	break;
	case 57:
#line 240 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 68;}
	break;
	case 58:
#line 241 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 69;}
	break;
	case 59:
#line 244 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{act = 70;}
	break;
	case 60:
#line 159 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(INDEX, atoi(ts+1))); }}
	break;
	case 61:
#line 160 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(L_BRACE, 0)); }}
	break;
	case 62:
#line 161 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(R_BRACE, 0)); }}
	break;
	case 63:
#line 162 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(SEMI_COLON, 0)); }}
	break;
	case 64:
#line 163 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(ASSIGN, 0)); }}
	break;
	case 65:
#line 202 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p+1;{ tokens.push_back(Token(ASSIGN, 0)); tokens.push_back(Token(BLEND_V, D3D11_BLEND_ZERO)); }}
	break;
	case 66:
#line 187 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(ADDRESS_V, D3D11_TEXTURE_ADDRESS_MIRROR)); }}
	break;
	case 67:
#line 193 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(SRC_BLEND_K,0));}}
	break;
	case 68:
#line 194 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(DEST_BLEND_K,0));}}
	break;
	case 69:
#line 195 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(BLEND_OP_K,0));}}
	break;
	case 70:
#line 206 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(BLEND_V, D3D11_BLEND_SRC_ALPHA)); }}
	break;
	case 71:
#line 223 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(BLEND_OP_V, D3D11_BLEND_OP_MIN)); }}
	break;
	case 72:
#line 232 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(CULL_MODE_V, D3D11_CULL_FRONT)); }}
	break;
	case 73:
#line 238 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(VALUE, atoi(ts))); }}
	break;
	case 74:
#line 239 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(FLOAT_VALUE, (float)atof(ts))); }}
	break;
	case 75:
#line 240 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(VALUE, make_hex(ts, te))); }}
	break;
	case 76:
#line 241 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ tokens.push_back(Token(ID, (int)make_string(ts, te))); }}
	break;
	case 77:
#line 244 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{te = p;p--;{ }}
	break;
	case 78:
#line 238 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{{p = ((te))-1;}{ tokens.push_back(Token(VALUE, atoi(ts))); }}
	break;
	case 79:
#line 241 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"
	{{p = ((te))-1;}{ tokens.push_back(Token(ID, (int)make_string(ts, te))); }}
	break;
	case 80:
#line 1 "NONE"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 6:
	{{p = ((te))-1;} tokens.push_back(Token(DEPTH_STENCIL_STATE_K,0));}
	break;
	case 7:
	{{p = ((te))-1;} tokens.push_back(Token(RASTERIZER_STATE_K,0));}
	break;
	case 8:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_STATE_K,0));}
	break;
	case 9:
	{{p = ((te))-1;} tokens.push_back(Token(SAMPLER_STATE_K,0));}
	break;
	case 10:
	{{p = ((te))-1;} tokens.push_back(Token(BOOL_V, 0)); }
	break;
	case 11:
	{{p = ((te))-1;} tokens.push_back(Token(BOOL_V, 1)); }
	break;
	case 12:
	{{p = ((te))-1;} tokens.push_back(Token(DEPTH_WRITE_MASK_V, D3D11_DEPTH_WRITE_MASK_ALL)); }
	break;
	case 13:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_MAG_MIP_POINT)); }
	break;
	case 14:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR)); }
	break;
	case 15:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT)); }
	break;
	case 16:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR)); }
	break;
	case 17:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT)); }
	break;
	case 18:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR)); }
	break;
	case 19:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT)); }
	break;
	case 20:
	{{p = ((te))-1;} tokens.push_back(Token(FILTER_V, D3D11_FILTER_ANISOTROPIC)); }
	break;
	case 21:
	{{p = ((te))-1;} tokens.push_back(Token(ADDRESS_V, D3D11_TEXTURE_ADDRESS_CLAMP)); }
	break;
	case 22:
	{{p = ((te))-1;} tokens.push_back(Token(ADDRESS_V, D3D11_TEXTURE_ADDRESS_WRAP)); }
	break;
	case 24:
	{{p = ((te))-1;} tokens.push_back(Token(ADDRESS_V, D3D11_TEXTURE_ADDRESS_BORDER)); }
	break;
	case 25:
	{{p = ((te))-1;} tokens.push_back(Token(ADDRESS_V, D3D11_TEXTURE_ADDRESS_MIRROR_ONCE)); }
	break;
	case 26:
	{{p = ((te))-1;} tokens.push_back(Token(ALPHA_TO_COVERAGE_ENABLE_K,0));}
	break;
	case 27:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_ENABLE_K,0));}
	break;
	case 31:
	{{p = ((te))-1;} tokens.push_back(Token(SRC_BLEND_ALPHA_K,0));}
	break;
	case 32:
	{{p = ((te))-1;} tokens.push_back(Token(DEST_BLEND_ALPHA_K,0));}
	break;
	case 33:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_OP_ALPHA_K,0));}
	break;
	case 34:
	{{p = ((te))-1;} tokens.push_back(Token(RENDER_TARGET_WRITE_MASK_K,0));}
	break;
	case 36:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_ONE)); }
	break;
	case 37:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_SRC_COLOR)); }
	break;
	case 38:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_SRC_COLOR)); }
	break;
	case 40:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_SRC_ALPHA)); }
	break;
	case 41:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_DEST_ALPHA)); }
	break;
	case 42:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_DEST_ALPHA)); }
	break;
	case 43:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_DEST_COLOR)); }
	break;
	case 44:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_DEST_COLOR)); }
	break;
	case 45:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_SRC_ALPHA_SAT)); }
	break;
	case 46:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_BLEND_FACTOR)); }
	break;
	case 47:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_BLEND_FACTOR)); }
	break;
	case 48:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_SRC1_COLOR)); }
	break;
	case 49:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_SRC1_COLOR)); }
	break;
	case 50:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_SRC1_ALPHA)); }
	break;
	case 51:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_V, D3D11_BLEND_INV_SRC1_ALPHA)); }
	break;
	case 52:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_OP_V, D3D11_BLEND_OP_ADD)); }
	break;
	case 53:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_OP_V, D3D11_BLEND_OP_SUBTRACT)); }
	break;
	case 54:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_OP_V, D3D11_BLEND_OP_REV_SUBTRACT)); }
	break;
	case 56:
	{{p = ((te))-1;} tokens.push_back(Token(BLEND_OP_V, D3D11_BLEND_OP_MAX)); }
	break;
	case 57:
	{{p = ((te))-1;} tokens.push_back(Token(FILL_MODE_K, 0)); }
	break;
	case 58:
	{{p = ((te))-1;} tokens.push_back(Token(FILL_MODE_V, D3D11_FILL_SOLID)); }
	break;
	case 59:
	{{p = ((te))-1;} tokens.push_back(Token(FILL_MODE_V, D3D11_FILL_WIREFRAME)); }
	break;
	case 60:
	{{p = ((te))-1;} tokens.push_back(Token(CULL_MODE_K, 0)); }
	break;
	case 61:
	{{p = ((te))-1;} tokens.push_back(Token(CULL_MODE_V, D3D11_CULL_NONE)); }
	break;
	case 63:
	{{p = ((te))-1;} tokens.push_back(Token(CULL_MODE_V, D3D11_CULL_BACK)); }
	break;
	case 64:
	{{p = ((te))-1;} tokens.push_back(Token(FRONT_COUNTER_CLOCKWISE_K, 0)); }
	break;
	case 65:
	{{p = ((te))-1;} tokens.push_back(Token(DEPTH_BIAS_K, 0)); }
	break;
	case 66:
	{{p = ((te))-1;} tokens.push_back(Token(VALUE, atoi(ts))); }
	break;
	case 68:
	{{p = ((te))-1;} tokens.push_back(Token(VALUE, make_hex(ts, te))); }
	break;
	case 69:
	{{p = ((te))-1;} tokens.push_back(Token(ID, (int)make_string(ts, te))); }
	break;
	case 70:
	{{p = ((te))-1;} }
	break;
	}
	}
	break;
#line 2105 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
		}
	}

_again:
	_acts = _rasta_man_actions + _rasta_man_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{ts = 0;}
	break;
	case 1:
#line 1 "NONE"
	{act = 0;}
	break;
#line 2119 "C:\\projects\\shindig\\shindig\\parser\\state_parser_lexer.cpp"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _rasta_man_eof_trans[cs] > 0 ) {
		_trans = _rasta_man_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 249 "C:\\projects\\shindig\\shindig\\parser\\parser.rl"

 
  return 1;
}

